function unpackedFile = fn_BionodeBinOpen(packedFileDir, ADCres)
%% fn_BionodeBinOpen.m
%
% Created by: Alessandro Ascani Orsini
%
% Date: 11/09/2024
%
% Version: 0.0.3
%
% *Description*: This function opens a bin file generated by the Bionode, given the ADC resolution, sampling rate,
% header size, and outputs a struct containing all the data in the bin.

%% Unpack the rawdata
fileID = fopen(packedFileDir, 'rb'); % Get the file ID
if fileID == -1
    error('File could not be opened. Check the path or permissions.'); % Check if the file opened successfully
end

%% Read Timestamp Header (10 bytes) + Remaining Header Bytes
rawData = fread(fileID, 'uint8'); % Read the rawData
year = bitshift(rawData(1), 8) + rawData(2);
month = rawData(3);
day = rawData(4);
hour = rawData(5);
minute = rawData(6);
second = rawData(7);
sampleRate = bitshift(rawData(8),8) + rawData(9);
numChannels = rawData(10);

% Store the timestamp as a datetime in the struct
unpackedFile.Date = datetime(year, month, day, hour, minute, second);
unpackedFile.sampleRate = sampleRate;
unpackedFile.channelSampleRate = sampleRate/numChannels;
unpackedFile.numChannels = numChannels;

%% Initialize variables based on metadata
bytesPerSample = ADCres / 8; % Calculate the number of bytes per sample
dataFormat = ['bit', num2str(ADCres)]; % Data format string placeholder
tickPeriod = (2^9)./16e6;        % seconds per tick in the timeStamp (here: 32e-6)

%% Data Packets (assume small = 58 bytes)
packetNum = length(rawData)/58;                       % number of packets in the file (incl. header treated as "packet 1")
channelsData = zeros(numChannels,24*packetNum./numChannels); % preallocate channels data
nSamples = 24 / numChannels;                          % samples per channel per packet (total 24 per packet across all channels)
PIDs = zeros(1, packetNum-1);                         % assuming first packet is header
packetTS = zeros(1, packetNum-1, 'uint32');           % raw 32-bit timestamp per packet (from footer)
packetTimeSec = zeros(1, 24*packetNum./numChannels);                % start time (s) per packet based on sampleRate & datapoints
find0 = false;                                        % bool to find whether the 0 has been found
fprintf("Unpacking Data from file... \n");

for i = 2:packetNum
    tempPacket = rawData((58.*(i-1))+1 : 58.*i); % packet i (1-based)
    PIDs(i-1) = bitshift(tempPacket(3), 8) + tempPacket(4);  % PID is bytes 3â€“4
    %% Payload unpacking
    X = tempPacket(8:end-15);                 % data payload excluding StimStatus(5), TimeStamp(4), CRC(2)
    X_matrix = reshape(X, 3, []).';           % rows of 3 bytes
    yarr = uint32(X_matrix(:,1)) * 2^16 + ...
           uint32(X_matrix(:,2)) * 2^8  + ...
           uint32(X_matrix(:,3));             % 24-bit groups

    % Split each 24-bit value into two 12-bit samples
    zarr = zeros(1, 2*length(yarr));
    for j = 1:length(yarr)
        mask = 0xFFF000;
        for k = 1:2
            zarr(2*(j-1) + k) = bitshift(bitand(yarr(j), mask), -(12 * (2 - k)));
            mask = bitshift(mask, -12);
        end
    end
    packetData = reshape(zarr, numChannels, nSamples); % numChannels x nSamples
    sampleStart = (i-2)*nSamples + 1;
    sampleEnd   = (i-2)*nSamples + nSamples;
    channelsData(:, sampleStart:sampleEnd) = packetData;
    %% Get TimeStamp and adjust to seconds - THIS NEEDS TO BE FIXED, I SUSPECT THE INITIAL PART IS INCORRECT!!!
    tsBytes = tempPacket(end-5:end-2);  % get timestamp bytes
    packetTS(i-1) = uint32(tsBytes(1))*2^24 + uint32(tsBytes(2))*2^16 + ...
                    uint32(tsBytes(3))*2^8  + uint32(tsBytes(4)); % TimeStamp in u32
    % to solve bug of high timestamps at the beginning
    if i>2 & packetTS(i-1)<packetTS(i-2) & packetTS(i-1)<200 % for the first time if the packet is smaller than the one preceding it
        if find0~=true
            packet0 = i-1; % save the 0 packet
            find0=true; % then change the flag. This will be the 0.
        end
    end
    % if the 0 has been found, start counting from there
    if find0
        timePktStrt = double(packetTS(i-1)).*tickPeriod; % time at which the packet starts in s
        packetTimeSec(sampleStart:sampleEnd) = timePktStrt:1./unpackedFile.channelSampleRate:timePktStrt+(nSamples-1)./unpackedFile.channelSampleRate; 
    end
    % Progress
    if mod(i, round(packetNum*0.05))==0
        fprintf('Progress: %.0f%%\n', (i / packetNum) * 100);
    end
end

fprintf("Unpacking Completed! \n")

unpackedFile.channelsData     = channelsData;
unpackedFile.PID              = PIDs;
unpackedFile.packetTimestamp  = packetTS;      % raw uint32 timestamp from each packet footer
unpackedFile.time    = packetTimeSec; % packet start times computed from sampleRate (seconds)

% Close the file
fclose(fileID);
end